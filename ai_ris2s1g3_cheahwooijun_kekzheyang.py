# -*- coding: utf-8 -*-
"""AI_RIS2S1G3_CHEAHWOOIJUN_KEKZHEYANG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R2O5ujMSQUzw13LxybT4-Y4ICtWgt2OP
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from joblib import Memory

# Cache setup for faster reload
memory = Memory("./cachedir", verbose=0)

# Streamlit page config
st.set_page_config(
    page_title="Movie Recommender",
    page_icon="ðŸŽ¬",
    layout="wide"
)

# Cell 2: Load CSV data from Google Drive
@memory.cache
def load_data_from_drive(movies_url, credits_url, ratings_url):
    movies = pd.read_csv(movies_url, low_memory=False)
    credits = pd.read_csv(credits_url)
    ratings = pd.read_csv(ratings_url)

    # Merge datasets
    df = movies.merge(credits, on='movieId', how='left')
    avg_ratings = ratings.groupby('movieId')['rating'].mean().reset_index()
    df = df.merge(avg_ratings, on='movieId', how='left')

    # Fill missing values
    df['rating'] = df['rating'].fillna(0)
    df['genres'] = df['genres'].fillna('')
    df['overview'] = df['overview'].fillna('')
    return df

# Replace with your Google Drive direct CSV links
MOVIES_URL = "https://drive.google.com/uc?export=download&id=1GOuUEu1-KgepbjTxIOkbAU8VNJ5lfEg3"
CREDITS_URL = "https://drive.google.com/uc?export=download&id=10iuK9C87fYLyDLJhqT3bpVv1A2IErmHR"
RATINGS_URL = "https://drive.google.com/uc?export=download&id=122XJoryYXvv3AUa6F_y1KiCcYdXQjEp4"


df = load_data_from_drive(movies_url, credits_url, ratings_url)

# Quick check
st.write(df.head())

@memory.cache
def build_similarity(df):
    tfidf = TfidfVectorizer(stop_words='english')
    df['overview'] = df['overview'].fillna('')
    tfidf_matrix = tfidf.fit_transform(df['overview'])
    cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
    return cosine_sim

cosine_sim = build_similarity(df)

def recommend_movies(title, df, cosine_sim, top_n=10):
    idx = df[df['title'] == title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:top_n+1]
    movie_indices = [i[0] for i in sim_scores]

    recommended = df.iloc[movie_indices].copy()
    recommended['rating_percent'] = recommended['rating'] * 20  # Convert to 0-100%
    return recommended[['title', 'genres', 'rating_percent']]

st.sidebar.header("Filters")

# Movie selection dropdown
movie_list = df['title'].sort_values().tolist()
selected_movie = st.sidebar.selectbox("Select a movie", movie_list)

# Top N slider
top_n = st.sidebar.slider("Number of recommendations", 5, 20, 10)

if selected_movie:
    recommended_movies = recommend_movies(selected_movie, df, cosine_sim, top_n)

    st.subheader(f"Top {top_n} movies similar to '{selected_movie}'")
    st.dataframe(recommended_movies)

from sklearn.metrics import mean_squared_error, mean_absolute_error

# Merge predicted ratings (simple avg rating) with actual ratings
pred_ratings = df[['movieId', 'rating']].copy()
actual_ratings = pd.read_csv(ratings_url)

# Merge on movieId and userId if needed, for RMSE/MAE
merged = actual_ratings.merge(pred_ratings, on='movieId', suffixes=('_actual', '_pred'))
rmse = mean_squared_error(merged['rating_actual'], merged['rating_pred'], squared=False)
mae = mean_absolute_error(merged['rating_actual'], merged['rating_pred'])

st.subheader("Model Evaluation")
st.write(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
st.write(f"Mean Absolute Error (MAE): {mae:.2f}")
